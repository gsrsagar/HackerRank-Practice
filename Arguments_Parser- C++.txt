-----------------Discussions------------------------

Solution 1:

#include <bits/stdc++.h>
using namespace std;
int main()
{
int n, q,i;
cin>>n>>q;
string temp;
vector<string> hrml;
vector<string> quer;
cin.ignore();
for(i=0;i<n;i++)
{
    getline(cin,temp);
    hrml.push_back(temp);
}
for(i=0;i<q;i++)
{
    getline(cin,temp);
    quer.push_back(temp);
}
map<string, string> m;
vector<string> tag;
for(i=0;i<n;i++)
{
    temp=hrml[i];
    temp.erase(remove(temp.begin(), temp.end(), '\"' ),temp.end());
    temp.erase(remove(temp.begin(), temp.end(), '>' ),temp.end());
    if(temp.substr(0,2)=="</")
    {
        tag.pop_back();
    }
    else
    {
        stringstream ss;
        ss.str("");
        ss<<temp;
        string t1,p1,v1;
        char ch;
        ss>>ch>>t1>>p1>>ch>>v1;
        string temp1="";
        if(tag.size()>0)
        {
            temp1=*tag.rbegin();
            temp1=temp1+"."+t1;
        }
        else
            temp1=t1;
        tag.push_back(temp1);
        m[*tag.rbegin()+"~"+p1]=v1;
        while(ss)
        {
            ss>>p1>>ch>>v1;
            m[*tag.rbegin()+"~"+p1]=v1;
        }
    }
}
for(i=0;i<q;i++){
    if (m.find(quer[i]) == m.end())
        cout << "Not Found!\n";
    else
        cout<<m[quer[i]]<<endl;
}
return 0;

-----------------------------------------------------------


solution 2:




int n,q;
cin >> n >> q;
cin.ignore();

map <string,string> attributeDB; // to store attribute-value pairs
string inputstr,tag_preamble="";

// get each HRML line
for (int i=0;i<n;i++) {
    getline(cin,inputstr);    

    // for each HRML line, break it up into token words
    stringstream ss(inputstr);
    string word, attribute, value;
    size_t pos;
    while (getline(ss, word, ' ')) { // for each token word
        // tag detected -> adjust tag_preamble by +/- tag
        if (word[0]=='<') {
            string tag;
            if (word[1]=='/') { // it's tag closing
                tag=word.substr(2);   
                tag=tag.substr(0,tag.length()-1); // rid of ">"
                pos=tag_preamble.find("."+tag);
                if (pos==string::npos) tag_preamble="";
                else tag_preamble=tag_preamble.substr(0,pos);
            }
            else { // it's tag opening
                tag=word.substr(1);
                if (tag.find(">")!=string::npos) 
                tag=tag.substr(0,tag.length()-1); // rid of ">"
                if (tag_preamble=="") tag_preamble=tag;
                else tag_preamble=tag_preamble+"."+tag;
            }
        }
        // value detected
        else if (word[0]=='"') {
            pos=word.find_last_of('"');
            value=word.substr(1,pos-1);
            attributeDB[attribute]=value; // insert into DB
        }
        // attribute name detected
        else if (word[0]!='=') {
            attribute=tag_preamble + "~" + word;  
        }
    }
}

// now we process the queries
for (int i=0;i<q;i++) {
    getline(cin,inputstr); 
    if (attributeDB.find(inputstr)==attributeDB.end())
        cout << "Not Found!" << endl;
    else
        cout << attributeDB[inputstr] << endl;
}